--
-- Скрипт сгенерирован Devart dbForge Studio for MySQL, Версия 6.2.233.0
-- Домашняя страница продукта: http://www.devart.com/ru/dbforge/mysql/studio
-- Дата скрипта: 03.09.2014 18:15:40
-- Версия сервера: 5.1.62-community
-- Версия клиента: 4.1
--


USE phcdata;

CREATE TABLE order_exstate_prolong (
  id varchar(50) NOT NULL DEFAULT '',
  sub_id varchar(50) NOT NULL DEFAULT '',
  state int(10) DEFAULT 0,
  state_date datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  comment char(255) DEFAULT NULL,
  PRIMARY KEY (id, sub_id, state_date)
)
ENGINE = INNODB
AVG_ROW_LENGTH = 3276
CHARACTER SET utf8
COLLATE utf8_general_ci;

CREATE TABLE order_extra_info (
  id varchar(50) NOT NULL DEFAULT '',
  sub_id varchar(50) NOT NULL DEFAULT '',
  endpaper varchar(100) DEFAULT NULL,
  interlayer varchar(100) DEFAULT NULL,
  calc_type varchar(100) DEFAULT NULL,
  cover varchar(100) DEFAULT NULL,
  format varchar(100) DEFAULT NULL,
  corner_type varchar(100) DEFAULT NULL,
  kaptal varchar(100) DEFAULT NULL,
  tempId varchar(50) DEFAULT NULL,
  PRIMARY KEY (id, sub_id)
)
ENGINE = INNODB
AVG_ROW_LENGTH = 377
CHARACTER SET utf8
COLLATE utf8_general_ci;

CREATE TABLE order_extra_state (
  id varchar(50) NOT NULL DEFAULT '',
  sub_id varchar(50) NOT NULL DEFAULT '',
  state int(10) NOT NULL DEFAULT 0,
  start_date datetime DEFAULT NULL,
  state_date datetime DEFAULT NULL,
  reported tinyint(1) DEFAULT 0,
  PRIMARY KEY (id, sub_id, state)
)
ENGINE = INNODB
AVG_ROW_LENGTH = 216
CHARACTER SET utf8
COLLATE utf8_general_ci;

CREATE TABLE orders (
  id varchar(50) NOT NULL DEFAULT '',
  source int(7) NOT NULL DEFAULT 0,
  src_id varchar(50) NOT NULL DEFAULT '',
  src_date datetime DEFAULT NULL,
  data_ts varchar(20) DEFAULT NULL,
  state int(5) DEFAULT 0,
  state_date datetime DEFAULT NULL,
  ftp_folder varchar(50) DEFAULT NULL,
  local_folder varchar(50) DEFAULT NULL,
  fotos_num int(5) DEFAULT 0,
  sync int(11) DEFAULT 0,
  is_preload tinyint(1) DEFAULT 0,
  reported_state int(5) DEFAULT 0,
  PRIMARY KEY (id)
)
ENGINE = INNODB
AVG_ROW_LENGTH = 170
CHARACTER SET utf8
COLLATE utf8_general_ci;

CREATE TABLE sources_sync (
  id int(7) NOT NULL,
  sync int(11) NOT NULL DEFAULT 0,
  sync_date datetime DEFAULT NULL,
  sync_state tinyint(1) DEFAULT 0,
  PRIMARY KEY (id)
)
ENGINE = INNODB
AVG_ROW_LENGTH = 2048
CHARACTER SET utf8
COLLATE utf8_general_ci;

CREATE TABLE tech_unit (
  order_id varchar(50) NOT NULL DEFAULT '',
  sub_id varchar(50) NOT NULL DEFAULT '',
  pg_id varchar(50) NOT NULL DEFAULT '',
  state int(5) NOT NULL,
  start_date datetime DEFAULT NULL,
  end_date datetime DEFAULT NULL,
  books int(5) DEFAULT 0,
  sheets int(5) DEFAULT 0,
  done int(5) DEFAULT 0,
  PRIMARY KEY (order_id, sub_id, pg_id, state)
)
ENGINE = INNODB
CHARACTER SET utf8
COLLATE utf8_general_ci;

CREATE TABLE tmp_orders (
  id varchar(50) NOT NULL DEFAULT '',
  source int(7) NOT NULL DEFAULT 0,
  src_id varchar(50) NOT NULL DEFAULT '',
  src_date datetime DEFAULT NULL,
  data_ts varchar(20) DEFAULT NULL,
  state int(5) DEFAULT 0,
  state_date datetime DEFAULT NULL,
  ftp_folder varchar(50) DEFAULT NULL,
  local_folder varchar(50) DEFAULT NULL,
  fotos_num int(5) DEFAULT 0,
  sync int(11) DEFAULT 0,
  reload tinyint(1) DEFAULT 0,
  is_new tinyint(1) DEFAULT 0,
  is_preload tinyint(1) DEFAULT 0,
  PRIMARY KEY (id),
  INDEX IDX_tmp_orders_source (source)
)
ENGINE = INNODB
AVG_ROW_LENGTH = 100
CHARACTER SET utf8
COLLATE utf8_general_ci;

CREATE TABLE print_group (
  id varchar(50) NOT NULL DEFAULT '',
  order_id varchar(50) NOT NULL,
  sub_id varchar(50) NOT NULL DEFAULT '',
  state int(5) DEFAULT NULL,
  state_date datetime DEFAULT NULL,
  width int(5) NOT NULL,
  height int(5) NOT NULL,
  paper int(5) DEFAULT 0,
  frame int(5) DEFAULT 0,
  correction int(5) DEFAULT 0,
  cutting int(5) DEFAULT 0,
  path varchar(100) DEFAULT '',
  file_num int(5) DEFAULT 0,
  destination int(5) DEFAULT NULL,
  book_type int(5) DEFAULT 0,
  book_part int(5) DEFAULT 0,
  book_num int(5) DEFAULT 0,
  sheet_num int(5) DEFAULT 0,
  is_pdf tinyint(1) DEFAULT 0,
  is_duplex tinyint(1) DEFAULT 0,
  is_reprint tinyint(1) DEFAULT 0,
  reprint_id varchar(50) DEFAULT NULL,
  prints int(10) DEFAULT 0,
  PRIMARY KEY (id),
  INDEX IDX_print_group_state (state),
  CONSTRAINT FK_print_group_orders_id FOREIGN KEY (order_id)
  REFERENCES orders (id) ON DELETE CASCADE ON UPDATE CASCADE
)
ENGINE = INNODB
AVG_ROW_LENGTH = 228
CHARACTER SET utf8
COLLATE utf8_general_ci;

CREATE TABLE state_log (
  id int(10) NOT NULL AUTO_INCREMENT,
  order_id varchar(50) NOT NULL DEFAULT '',
  sub_id varchar(50) NOT NULL DEFAULT '',
  pg_id varchar(50) DEFAULT NULL,
  state int(5) NOT NULL DEFAULT 0,
  state_date datetime NOT NULL,
  comment varchar(250) DEFAULT NULL,
  PRIMARY KEY (id),
  CONSTRAINT FK_state_log_orders_id FOREIGN KEY (order_id)
  REFERENCES orders (id) ON DELETE CASCADE ON UPDATE CASCADE
)
ENGINE = INNODB
AUTO_INCREMENT = 1477822
AVG_ROW_LENGTH = 67
CHARACTER SET utf8
COLLATE utf8_general_ci;

CREATE TABLE suborders (
  id varchar(50) NOT NULL DEFAULT '',
  order_id varchar(50) NOT NULL DEFAULT '',
  sub_id varchar(50) NOT NULL DEFAULT '',
  src_type int(5) NOT NULL DEFAULT 0,
  state int(5) DEFAULT 0,
  state_date datetime DEFAULT NULL,
  ftp_folder varchar(100) DEFAULT NULL,
  prt_qty int(5) DEFAULT 0,
  proj_type int(5) DEFAULT 1,
  PRIMARY KEY (order_id, sub_id),
  CONSTRAINT FK_suborders_orders_id FOREIGN KEY (order_id)
  REFERENCES orders (id) ON DELETE CASCADE ON UPDATE CASCADE
)
ENGINE = INNODB
AVG_ROW_LENGTH = 109
CHARACTER SET utf8
COLLATE utf8_general_ci;

CREATE TABLE tech_log (
  id int(10) NOT NULL AUTO_INCREMENT,
  order_id varchar(50) NOT NULL DEFAULT '',
  sub_id varchar(50) NOT NULL DEFAULT '',
  print_group varchar(50) NOT NULL DEFAULT '',
  sheet int(5) NOT NULL DEFAULT 0,
  src_id int(7) NOT NULL,
  log_date datetime DEFAULT NULL,
  PRIMARY KEY (id),
  INDEX FK_tech_log_print_group_id (print_group),
  INDEX IDX_tech_log (src_id, log_date),
  CONSTRAINT FK_tech_log_orders_id FOREIGN KEY (order_id)
  REFERENCES orders (id) ON DELETE CASCADE ON UPDATE CASCADE
)
ENGINE = INNODB
AUTO_INCREMENT = 482916
AVG_ROW_LENGTH = 69
CHARACTER SET utf8
COLLATE utf8_general_ci;

CREATE TABLE print_group_file (
  id int(10) NOT NULL AUTO_INCREMENT,
  print_group varchar(50) NOT NULL DEFAULT '',
  file_name varchar(100) DEFAULT '',
  prt_qty int(5) DEFAULT 0,
  book_num int(5) DEFAULT 0,
  page_num int(5) DEFAULT 0,
  caption varchar(100) DEFAULT '',
  PRIMARY KEY (id),
  CONSTRAINT FK_print_group_file_print_group_id FOREIGN KEY (print_group)
  REFERENCES print_group (id) ON DELETE CASCADE ON UPDATE CASCADE
)
ENGINE = INNODB
AUTO_INCREMENT = 2081465
AVG_ROW_LENGTH = 87
CHARACTER SET utf8
COLLATE utf8_general_ci;

DELIMITER $$

CREATE DEFINER = 'root'@'localhost'
PROCEDURE extraStateProlong (IN pOrder varchar(50), IN pSubOrder varchar(50), IN pState int, IN pComment varchar(250))
MODIFIES SQL DATA
BEGIN
  INSERT IGNORE INTO order_exstate_prolong
  (id, sub_id, state, state_date, comment)
    VALUES (pOrder, pSubOrder, pState, NOW(), pComment);
END
$$

CREATE DEFINER = 'root'@'localhost'
PROCEDURE extraStateReset (IN pOrder varchar(50), IN pSubOrder varchar(50), IN pState int)
BEGIN
  DECLARE vMinExtraState int;
  DECLARE vNow datetime DEFAULT NOW();

  -- clear
  DELETE
    FROM order_extra_state
  WHERE id = pOrder
    AND sub_id = pSubOrder
    AND state = pState;

  IF pSubOrder = '' THEN
    -- no suborders
    SELECT IFNULL(MIN(oes.state), 210) INTO vMinExtraState
    FROM order_extra_state oes
    WHERE oes.id = pOrder
    AND oes.state_date IS NOT NULL;
    UPDATE orders o
    SET o.state = vMinExtraState,
        o.state_date = vNow
    WHERE o.id = pOrder
    AND o.state > 210
    AND o.state != vMinExtraState; -- 210 > Print post???
  ELSE
    -- set suborder state
    SELECT IFNULL(MIN(oes.state), 210) INTO vMinExtraState
    FROM order_extra_state oes
    WHERE oes.id = pOrder
    AND oes.sub_id = pSubOrder
    AND oes.state_date IS NOT NULL;
    UPDATE suborders o
    SET o.state = vMinExtraState,
        o.state_date = vNow
    WHERE o.order_id = pOrder
    AND o.sub_id = pSubOrder
    AND o.state > 210
    AND o.state != vMinExtraState;
    -- set order extrastate
    SELECT IFNULL(MIN(oes.state), 210) INTO vMinExtraState
    FROM suborders so
      LEFT OUTER JOIN order_extra_state oes ON oes.id = so.order_id
        AND so.sub_id = oes.sub_id
        AND oes.state_date IS NOT NULL
    WHERE so.order_id = pOrder;
    -- del order extra state
    DELETE
      FROM order_extra_state
    WHERE id = pOrder
      AND sub_id = ''
      AND state > vMinExtraState;
    -- set order state
    UPDATE orders o
    SET o.state = vMinExtraState,
        o.state_date = vNow
    WHERE o.id = pOrder
    AND o.state > 210
    AND o.state != vMinExtraState; -- 210 > Print ???
  END IF;
END
$$

CREATE DEFINER = 'root'@'localhost'
PROCEDURE extraStateSet (IN pOrder varchar(50), IN pSubOrder varchar(50), IN pState int, IN pDate datetime)
MODIFIES SQL DATA
BEGIN
  DECLARE vMinExtraState int;
  DECLARE vBookPart int;
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET vBookPart = -1;

  IF pDate IS NULL THEN
    SET pDate = NOW();
  END IF;

  -- fix
  INSERT INTO order_extra_state
  (id, sub_id, state, start_date, state_date)
    VALUES (pOrder, pSubOrder, pState, pDate, pDate)
  ON DUPLICATE KEY UPDATE state_date = pDate;

  IF pSubOrder = '' THEN
    -- set order state
    UPDATE orders o
    SET o.state = pState,
        o.state_date = pDate
    WHERE o.id = pOrder;
  ELSE
    -- set suborder state
    UPDATE suborders s
    SET s.state = pState,
        s.state_date = pDate
    WHERE s.order_id = pOrder
    AND s.sub_id = pSubOrder;

    SELECT os.book_part INTO vBookPart
    FROM phcconfig.order_state os
    WHERE os.id = pState;

    IF vBookPart = 0 THEN
      -- common state, check update order state
      -- start order
      INSERT IGNORE INTO order_extra_state
      (id, sub_id, state, start_date)
        VALUES (pOrder, '', pState, pDate);
      -- forvard order extra state check suborders
      SELECT IFNULL(MIN(oes.state), 0) INTO vMinExtraState
      FROM suborders so
        LEFT OUTER JOIN order_extra_state oes ON oes.id = so.order_id
          AND so.sub_id = oes.sub_id
          AND oes.state_date IS NOT NULL
      WHERE so.order_id = pOrder;
      IF vMinExtraState > 0 THEN
        -- set order extra state
        -- update IF started
        UPDATE order_extra_state
        SET state_date = pDate
        WHERE id = pOrder
        AND sub_id = ''
        AND state = vMinExtraState
        AND state_date IS NULL;
        -- insert if not exists
        INSERT IGNORE INTO order_extra_state
        (id, sub_id, state, start_date, state_date)
          VALUES (pOrder, '', vMinExtraState, pDate, pDate);
        -- set order state
        UPDATE orders o
        SET o.state = vMinExtraState,
            o.state_date = pDate
        WHERE o.id = pOrder
        AND o.state > 209
        AND o.state != vMinExtraState; -- 210 > Print post
      END IF;
    END IF;
  END IF;

END
$$

CREATE DEFINER = 'root'@'localhost'
PROCEDURE extraStateSetByPGroup (IN pPrintGroup varchar(50), IN pState int)
MODIFIES SQL DATA
COMMENT 'dont use 4 print states'
BEGIN
  DECLARE vOrder varchar(50);
  DECLARE vSubOrder varchar(50);

  DECLARE CONTINUE HANDLER FOR NOT FOUND SET vOrder = NULL;

  SELECT pg.order_id, pg.sub_id INTO vOrder, vSubOrder
  FROM print_group pg
  WHERE pg.id = pPrintGroup;

  IF vOrder IS NOT NULL THEN
    UPDATE print_group pg
    SET pg.state = vState,
        pg.state_date = NOW()
    WHERE pg.id = pPrintGroup;

    CALL extraStateSet(vOrder, vSubOrder, pTechPoint);
  END IF;

END
$$

CREATE DEFINER = 'root'@'localhost'
PROCEDURE extraStateStart (IN pOrder varchar(50), IN pSubOrder varchar(50), IN pState int, IN pDate datetime)
MODIFIES SQL DATA
BEGIN
  IF pDate IS NULL THEN
    SET pDate = NOW();
  END IF;
  INSERT IGNORE INTO order_extra_state
  (id, sub_id, state, start_date)
    VALUES (pOrder, pSubOrder, pState, pDate);
  IF pSubOrder != '' THEN
    -- start order
    INSERT IGNORE INTO order_extra_state
    (id, sub_id, state, start_date)
      VALUES (pOrder, '', pState, pDate);
  END IF;
END
$$

CREATE DEFINER = 'root'@'localhost'
PROCEDURE logStateByPg (IN pPgId varchar(50), IN pSate int, IN pMsg varchar(250))
MODIFIES SQL DATA
BEGIN
  INSERT INTO state_log
  (order_id, sub_id, pg_id, state, state_date, comment)
    SELECT pg.order_id, pg.sub_id, pg.id, pSate, NOW(), pMsg
    FROM print_group pg
    WHERE pg.id = pPgId;
END
$$

CREATE DEFINER = 'root'@'localhost'
PROCEDURE orderCancel (IN pId varchar(50))
MODIFIES SQL DATA
BEGIN
  DECLARE vDate datetime DEFAULT NOW();

  UPDATE phcdata.orders o
  SET o.state = 510,
      o.state_date = vDate
  WHERE o.id = pId;

  UPDATE phcdata.print_group pg
  SET pg.state = 510,
      pg.state_date = vDate
  WHERE pg.order_id = pId;

  UPDATE phcdata.suborders s
  SET s.state = 510,
      s.state_date = vDate
  WHERE s.order_id = pId;

END
$$

CREATE DEFINER = 'root'@'localhost'
PROCEDURE orderCleanUp (IN pId varchar(50))
MODIFIES SQL DATA
BEGIN
  DECLARE vDate datetime DEFAULT NOW();

  DELETE
    FROM phcdata.print_group
  WHERE order_id = pId;
  DELETE
    FROM phcdata.order_extra_info
  WHERE id = pId;
  DELETE
    FROM phcdata.suborders
  WHERE order_id = pId;
  UPDATE phcdata.orders
  SET state = 100,
      state_date = vDate
  WHERE id = pId;
  INSERT INTO state_log
  (order_id, state, state_date, comment)
    VALUES (pId, 100, vDate, 'reset');
END
$$

CREATE DEFINER = 'root'@'localhost'
PROCEDURE printMarkInPrint (IN pPgroupId varchar(50))
MODIFIES SQL DATA
BEGIN
  DECLARE vPgId varchar(50);

  SET vPgId = phcdata.printPg2Reprint(pPgroupId);
  UPDATE print_group pg
  SET pg.state = 255,
      pg.state_date = NOW()
  WHERE pg.id = vPgId
  AND pg.state != 255;
END
$$

CREATE DEFINER = 'root'@'localhost'
PROCEDURE printStateCancel (IN pPgroupId varchar(50))
MODIFIES SQL DATA
BEGIN
  DECLARE vOrderId varchar(50);
  DECLARE vSubId varchar(50);
  DECLARE vMinState int;

  DECLARE CONTINUE HANDLER FOR NOT FOUND SET vOrderId = NULL;

  UPDATE print_group pg
  SET pg.state = 215,
      pg.state_date = NOW()
  WHERE pg.id = pPgroupId;

  SELECT pg.order_id, pg.sub_id INTO vOrderId, vSubId
  FROM print_group pg
  WHERE pg.id = pPgroupId;

  IF vOrderId IS NOT NULL THEN
    -- reset order/suborder state & extra
    UPDATE orders o
    SET o.state = 250,
        o.state_date = NOW()
    WHERE o.id = vOrderId
    AND o.state != 250;
    UPDATE order_extra_state
    SET state_date = NULL
    WHERE id = vOrderId
    AND sub_id = ''
    AND state IN (210, 250);
    IF vSubId != '' THEN
      UPDATE suborders o
      SET o.state = 250,
          o.state_date = NOW()
      WHERE o.id = vOrderId
      AND o.sub_id = vSubId
      AND o.state != 250;
      UPDATE order_extra_state
      SET state_date = NULL
      WHERE id = vOrderId
      AND sub_id = vSubId
      AND state IN (210, 250);
    END IF;

  END IF;

END
$$

CREATE DEFINER = 'root'@'localhost'
PROCEDURE printStateEnd (IN pPgroupId varchar(50))
MODIFIES SQL DATA
BEGIN
  DECLARE vOrderId varchar(50);
  DECLARE vSubId varchar(50);
  DECLARE vParent varchar(50);
  DECLARE vMinState int;

  DECLARE CONTINUE HANDLER FOR NOT FOUND SET vOrderId = NULL;

  UPDATE print_group pg
  SET pg.state = 300,
      pg.state_date = NOW()
  WHERE pg.id = pPgroupId;

  SELECT pg.order_id, pg.sub_id, pg.reprint_id INTO vOrderId, vSubId, vParent
  FROM print_group pg
  WHERE pg.id = pPgroupId;

  IF vOrderId IS NOT NULL THEN
    -- check reprint
    IF vParent IS NOT NULL THEN
      UPDATE print_group pg
      SET pg.state = 300,
          pg.state_date = NOW()
      WHERE pg.id = vParent;
    END IF;
    -- chek if all pg started
    SELECT IFNULL(MIN(pg.state), 0) INTO vMinState
    FROM print_group pg
    WHERE pg.order_id = vOrderId
    AND pg.sub_id = vSubId;
    IF vMinState >= 300 THEN
      -- all pg printed end order/suborder
      CALL extraStateSet(vOrderId, vSubId, 300, NOW());
    ELSE
      -- start order/suborder, 4 manual set printed
      CALL extraStateStart(vOrderId, vSubId, 300, NOW());
    END IF;

  END IF;

END
$$

CREATE DEFINER = 'root'@'localhost'
PROCEDURE printStateStart (IN pPgroupId varchar(50), IN lab int)
MODIFIES SQL DATA
BEGIN
  DECLARE vOrderId varchar(50);
  DECLARE vSubId varchar(50);
  DECLARE vMinState int;

  DECLARE CONTINUE HANDLER FOR NOT FOUND SET vOrderId = NULL;

  UPDATE print_group pg
  SET pg.state = 250,
      pg.state_date = NOW(),
      pg.destination = lab
  WHERE pg.id = pPgroupId
  AND pg.state != 250;

  SELECT pg.order_id, pg.sub_id INTO vOrderId, vSubId
  FROM print_group pg
  WHERE pg.id = pPgroupId;

  IF vOrderId IS NOT NULL THEN
    -- rise order/suborder state
    UPDATE orders o
    SET o.state = 250,
        o.state_date = NOW()
    WHERE o.id = vOrderId
    AND o.state < 250;
    IF vSubId != '' THEN
      UPDATE suborders o
      SET o.state = 250,
          o.state_date = NOW()
      WHERE o.id = vOrderId
      AND o.sub_id = vSubId
      AND o.state < 250;
    END IF;

    -- chek if all pg started
    SELECT IFNULL(MIN(pg.state), 0) INTO vMinState
    FROM print_group pg
    WHERE pg.order_id = vOrderId
    AND pg.sub_id = vSubId;
    IF vMinState >= 250 THEN
      -- all pg started end order/suborder
      CALL extraStateSet(vOrderId, vSubId, 210, NOW());
    ELSE
      -- start order/suborder
      CALL extraStateStart(vOrderId, vSubId, 210, NOW());
    END IF;

  END IF;
END
$$

CREATE DEFINER = 'root'@'localhost'
PROCEDURE sync ()
MODIFIES SQL DATA
COMMENT 'синхронизация всех активных сайтов'
BEGIN
  DECLARE vId integer(7) DEFAULT (0);
  DECLARE vIsEnd int DEFAULT (0);
  DECLARE vCur CURSOR FOR
  SELECT s.id
  FROM phcconfig.sources s
  WHERE s.online = 1;

  DECLARE CONTINUE HANDLER FOR NOT FOUND SET vIsEnd = 1;

  OPEN vCur;
wet:
  LOOP
    FETCH vCur INTO vId;
    IF vIsEnd THEN
      LEAVE wet;
    END IF;
    CALL phcdata.syncSource(vId);
  END LOOP wet;
  CLOSE vCur;

END
$$

CREATE DEFINER = 'root'@'localhost'
PROCEDURE syncSource (IN pSourceId int)
MODIFIES SQL DATA
main:
BEGIN
  DECLARE vSync integer(11) DEFAULT (0);
  DECLARE vCnt integer(11) DEFAULT (0);

  DECLARE EXIT HANDLER FOR SQLEXCEPTION
  BEGIN
    ROLLBACK;
  END;
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET vSync = 0;

  IF NOT EXISTS
    (SELECT 1
      FROM phcdata.tmp_orders t
      WHERE t.source = pSourceId) THEN
    LEAVE main;
  END IF;

  -- reset sync state
  UPDATE phcdata.sources_sync ss
  SET ss.sync_date = NOW(),
      ss.sync_state = 0
  WHERE ss.id = pSourceId;

  -- keep in transaction
  START TRANSACTION;

    -- get next sync
    SELECT ss.sync INTO vSync
    FROM phcdata.sources_sync ss
    WHERE ss.id = pSourceId;
    SET vSync = IFNULL(vSync, 0) + 1;

    -- set sync
    UPDATE phcdata.tmp_orders to1
    SET to1.sync = vSync
    WHERE to1.source = pSourceId;

    -- add new
    -- search new
    UPDATE phcdata.tmp_orders to1
    SET to1.is_new = IFNULL(
    (SELECT 0
      FROM phcdata.orders o
      WHERE o.id = to1.id), 1)
    WHERE to1.source = pSourceId;
    -- insert new
    INSERT INTO phcdata.orders
    (id, source, src_id, src_date, state, state_date, ftp_folder, fotos_num, sync, is_preload, data_ts)
      SELECT id, source, src_id, src_date, state, state_date, ftp_folder, fotos_num, sync, is_preload, data_ts
      FROM phcdata.tmp_orders to1
      WHERE to1.source = pSourceId
      AND to1.is_new = 1;
    -- remove new
    DELETE
      FROM phcdata.tmp_orders
    WHERE source = pSourceId
      AND is_new = 1;

    -- update sync
    UPDATE phcdata.orders
    SET sync = vSync
    WHERE orders.id IN
    (SELECT id
      FROM phcdata.tmp_orders to1
      WHERE to1.source = pSourceId);

    -- check/process preload
    -- update printgroup 
    UPDATE phcdata.print_group
    SET state = 200,
        state_date = NOW()
    WHERE state = 199
    AND order_id IN
    (SELECT t.id
      FROM phcdata.tmp_orders t
      WHERE t.source = pSourceId
      AND t.is_preload = 0);
    -- suborders
    UPDATE phcdata.suborders s
    SET s.state = 200,
        s.state_date = NOW()
    WHERE s.state = 199
    AND s.order_id IN
    (SELECT t.id
      FROM phcdata.tmp_orders t
      WHERE t.source = pSourceId
      AND t.is_preload = 0);
    -- orders
    UPDATE phcdata.orders o
    SET state = 200,
        state_date = NOW(),
        is_preload = 0
    WHERE o.state = 199
    AND o.id IN
    (SELECT t.id
      FROM phcdata.tmp_orders t
      WHERE t.source = pSourceId
      AND t.is_preload = 0);

    -- cancel not in sync
    -- cancel print groups
    UPDATE phcdata.print_group
    SET state = 510,
        state_date = NOW()
    WHERE order_id IN
    (SELECT id
      FROM phcdata.orders o
      WHERE o.source = pSourceId
      AND o.state BETWEEN 100 AND 200
      AND o.sync != vSync);
    -- cancel suborders
    UPDATE phcdata.suborders s
    SET s.state = 510,
        s.state_date = NOW()
    WHERE s.order_id IN
    (SELECT id
      FROM phcdata.orders o
      WHERE o.source = pSourceId
      AND o.state BETWEEN 100 AND 200
      AND o.sync != vSync);
    -- cancel orders
    UPDATE phcdata.orders o
    SET state = 510,
        state_date = NOW()
    WHERE o.source = pSourceId
    AND o.state BETWEEN 100 AND 200
    AND o.sync != vSync;

    -- finde reload candidate by project data time
    UPDATE phcdata.tmp_orders t
    SET t.reload = 1
    WHERE t.source = pSourceId
    AND t.data_ts IS NOT NULL
    AND EXISTS
    (SELECT 1
      FROM phcdata.orders o
      WHERE o.id = t.id
      AND o.data_ts IS NOT NULL
      AND o.data_ts != o.data_ts
      AND o.state BETWEEN 199 AND 200);
    -- clean orders 4 reload
    -- clean print_group
    DELETE
      FROM phcdata.print_group
    WHERE order_id IN
      (SELECT id
        FROM phcdata.tmp_orders t
        WHERE t.source = pSourceId
        AND t.reload = 1);
    -- clean extra info
    DELETE
      FROM phcdata.order_extra_info
    WHERE id IN
      (SELECT id
        FROM phcdata.tmp_orders t
        WHERE t.source = pSourceId
        AND t.reload = 1);
    -- clean suborder
    DELETE
      FROM phcdata.suborders
    WHERE order_id IN
      (SELECT id
        FROM phcdata.tmp_orders t
        WHERE t.source = pSourceId
        AND t.reload = 1);
    -- reset order state
    UPDATE phcdata.orders o
    SET o.state = 100,
        o.state_date = NOW()
    WHERE o.id IN
    (SELECT id
      FROM phcdata.tmp_orders t
      WHERE t.source = pSourceId
      AND t.reload = 1);
    -- set project data time
    UPDATE phcdata.orders o
    SET o.data_ts =
    (SELECT tt.data_ts
      FROM phcdata.tmp_orders tt
      WHERE tt.id = o.id)
    WHERE o.source = pSourceId
    AND EXISTS
    (SELECT 1
      FROM phcdata.tmp_orders t
      WHERE t.id = o.id
      AND t.data_ts IS NOT NULL
      AND t.data_ts != IFNULL(o.data_ts, ''));

    -- finalize
    DELETE
      FROM phcdata.tmp_orders
    WHERE source = pSourceId;
    INSERT INTO phcdata.sources_sync
    (id, sync, sync_date, sync_state)
      VALUES (pSourceId, vSync, NOW(), 1)
    ON DUPLICATE KEY UPDATE sync = vSync, sync_date = NOW(), sync_state = 1;
  COMMIT;
END
$$

CREATE DEFINER = 'root'@'localhost'
PROCEDURE techLogPg (IN pPgroup varchar(50), IN pSheet int, IN pTechPoint int, IN pDate datetime)
MODIFIES SQL DATA
BEGIN
  DECLARE vOrderId varchar(50);
  DECLARE vSubId varchar(50);
  DECLARE vState int;
  DECLARE vBooks int;
  DECLARE vSheets int;

  DECLARE CONTINUE HANDLER FOR NOT FOUND SET vOrderId = NULL;

  SELECT pg.order_id, pg.sub_id, pg.book_num, pg.sheet_num INTO vOrderId, vSubId, vBooks, vSheets
  FROM print_group pg
  WHERE pg.id = pPgroup;

  SELECT tp.tech_type INTO vState
  FROM phcconfig.tech_point tp
  WHERE tp.id = pTechPoint;

  IF vOrderId IS NOT NULL THEN
    IF vState <= 300 THEN
      -- may be reprint
      SET pPgroup = phcdata.printPg2Reprint(pPgroup);
    END IF;
    -- log
    INSERT INTO tech_log
    (order_id, sub_id, print_group, sheet, src_id, log_date)
      VALUES (vOrderId, vSubId, pPgroup, pSheet, pTechPoint, pDate);
    -- check
    CALL techUnitCalc(vOrderId, vSubId, pPgroup, vState, vBooks, vSheets);
  END IF;

END
$$

CREATE DEFINER = 'root'@'localhost'
PROCEDURE techUnitCalc (IN pOrder varchar(50), IN pSubOrder varchar(50), IN pPgroup varchar(50), IN pState int, IN pBooks int, IN pSheets int)
MODIFIES SQL DATA
BEGIN
  DECLARE vDone int;
  DECLARE vStart datetime;
  DECLARE vEnd datetime;
  DECLARE vCount int;
  DECLARE vMinState int;


  IF pPgroup IS NULL THEN
    SET pPgroup = '';
  END IF;
  IF pSubOrder IS NULL THEN
    SET pSubOrder = '';
  END IF;

  SELECT IFNULL(COUNT(DISTINCT tl.sheet), 0), IFNULL(MIN(tl.log_date), NOW()), IFNULL(MAX(tl.log_date), NOW()) INTO vDone, vStart, vEnd
  FROM tech_log tl
    INNER JOIN phcconfig.tech_point tp ON tl.src_id = tp.id
  WHERE tl.order_id = pOrder
  AND tl.sub_id = pSubOrder
  AND tl.print_group = pPgroup
  AND tp.tech_type = pState;
  /*
  INSERT INTO tech_unit (order_id, sub_id, pg_id, state, start_date, end_date, books, sheets, done)
                    VALUES( pOrder, pSubOrder, pPgroup, pState, vStart, vEnd, pBooks, pSheets, vDone)
    ON DUPLICATE KEY UPDATE start_date=vStart, end_date=vEnd, done=vDone;

  SELECT ROW_COUNT() INTO vCount;
  IF vCount =1 THEN
    -- inserted
    CALL extraStateStart(pOrder, pSubOrder, pState, vStart);
  END IF;
  */

  IF vDone = pBooks * pSheets
    OR (pState = 320
    AND vDone = pBooks * 2) THEN -- 320 - TECH_FOLDING (log first & end sheet per book)
    -- complited
    IF pPgroup != '' THEN
      UPDATE print_group pg
      SET pg.state = pState,
          pg.state_date = vEnd
      WHERE pg.id = pPrintGroup;
    END IF;
    IF pState = 300 THEN
      -- print state, check pringroups
      SELECT IFNULL(MIN(pg.state), 0) INTO vMinState
      FROM print_group pg
      WHERE pg.order_id = pOrder
      AND pg.sub_id = pSubOrder;
      IF vMinState >= 300 THEN
        -- all pg printed end order/suborder
        CALL extraStateSet(pOrder, pSubOrder, pState, vEnd);
      ELSE
        -- start
        CALL extraStateStart(pOrder, pSubOrder, pState, vStart);
      END IF;
    ELSE
      CALL extraStateSet(pOrder, pSubOrder, pState, vEnd);
    END IF;
  ELSE
    -- start
    CALL extraStateStart(pOrder, pSubOrder, pState, vStart);
  END IF;

END
$$

CREATE DEFINER = 'root'@'localhost'
FUNCTION printPg2Reprint (pPgroupId varchar(50))
RETURNS varchar(50) charset utf8
READS SQL DATA
BEGIN
  DECLARE vPgId varchar(50);
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET vPgId = pPgroupId;

  SELECT pg1.id INTO vPgId
  FROM print_group pg
    INNER JOIN print_group pg1 ON pg.order_id = pg1.order_id
      AND pg.id = pg1.reprint_id
      AND pg1.state < 300
  WHERE pg.id = pPgroupId
  AND pg.is_reprint = 0
  LIMIT 1;


  RETURN vPgId;
END
$$

CREATE
DEFINER = 'root'@'localhost'
TRIGGER tg_orders_ai
AFTER INSERT
ON orders
FOR EACH ROW
BEGIN
  INSERT INTO state_log
  (order_id, state, state_date)
    VALUES (NEW.id, NEW.state, NOW());
END
$$

CREATE
DEFINER = 'root'@'localhost'
TRIGGER tg_orders_au
AFTER UPDATE
ON orders
FOR EACH ROW
BEGIN
  IF NOT (OLD.state <=> NEW.state) THEN
    INSERT INTO state_log
    (order_id, state, state_date)
      VALUES (NEW.id, NEW.state, NOW());
  END IF;
END
$$

CREATE
DEFINER = 'root'@'localhost'
TRIGGER tg_print_group_ai
AFTER INSERT
ON print_group
FOR EACH ROW
BEGIN
  INSERT INTO state_log
  (order_id, sub_id, pg_id, state, state_date)
    VALUES (NEW.order_id, NEW.sub_id, NEW.id, NEW.state, NOW());
END
$$

CREATE
DEFINER = 'root'@'localhost'
TRIGGER tg_print_group_au
AFTER UPDATE
ON print_group
FOR EACH ROW
BEGIN
  IF NOT (OLD.state <=> NEW.state) THEN
    INSERT INTO state_log
    (order_id, sub_id, pg_id, state, state_date)
      VALUES (NEW.order_id, NEW.sub_id, NEW.id, NEW.state, NOW());
  END IF;
END
$$

CREATE
DEFINER = 'root'@'localhost'
TRIGGER tg_suborders_ai
AFTER INSERT
ON suborders
FOR EACH ROW
BEGIN
  INSERT INTO state_log
  (order_id, sub_id, state, state_date)
    VALUES (NEW.order_id, NEW.sub_id, NEW.state, NOW());
END
$$

CREATE
DEFINER = 'root'@'localhost'
TRIGGER tg_suborders_au
AFTER UPDATE
ON suborders
FOR EACH ROW
BEGIN
  IF NOT (OLD.state <=> NEW.state) THEN
    INSERT INTO state_log
    (order_id, sub_id, state, state_date)
      VALUES (NEW.order_id, NEW.sub_id, NEW.state, NOW());
  END IF;
END
$$

DELIMITER ;